'''
For given N you are to tell how many correct bracket strings of length 2N could be built.

Here is only one variant for N=1:

()

Two variants for N=2:

(())    ()()

Five for N=3:

((()))  (())()  ()(())  (()())  ()()()

And so on.

Input data contain a single value N, not exceeding 400.
Answer should contain exact (though perhaps pretty long) number of variants.

Example:

input data:
10

answer:
16796

# 375
# 458747349515228387029170854164431777413347720666622173519230104619228566929015473080495904725641029744254371724548989051264825355674454645276920294960180158802649251953985565397033096859139481731352914600542198807797297520

# 382
# 7310872054091644434526098035917389373745302412598226488995091865432273113877309417703661024015098375084573684109281457898016951583220731108755443794724860847554275456379556976159400976899984090862469914849825364292054323422080

# 320
# 448097603069210002807804071138291613484703901135653354167777883072873385042375007536704328293485059413040527191445301437332614475514418124766303707315232132627972684457827096771603621160500
'''


def catalans(n):
    if n <= 2:
        return 1
    return (catalans(n - 1) * ((4 * n) - 6)) // n


print(catalans(int(input()) + 1))

